function Gallery(){var t=document.querySelectorAll("article.gallery-item"),e=document.querySelector(".backimage"),r=function(r){for(var i=r.querySelector("img").src,n=0;n<t.length;n++)t[n].classList.remove("active");r.classList.add("active"),e.classList.remove("fadeout","fadein"),e.classList.add("fadeout"),setTimeout(function(){e.classList.remove("fadeout"),e.classList.add("fadein"),e.style.backgroundImage="url('"+i+"')"},500)};!function(){for(var e=0;e<t.length;e++)t[e].addEventListener("click",function(){r(this)});r(t[0])}()}function windowWidthCount(){document.querySelector(".window-width-label").innerHTML=window.outerWidth}function closeLateralMenu(){document.querySelector("#menu-open").checked=""}function loadLiveExample(t){document.querySelector(".iframe-live").src=t}!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.Handlebars=e():t.Handlebars=e()}(this,function(){return function(t){var e={};function r(i){if(e[i])return e[i].exports;var n=e[i]={exports:{},id:i,loaded:!1};return t[i].call(n.exports,n,n.exports,r),n.loaded=!0,n.exports}return r.m=t,r.c=e,r.p="",r(0)}([function(t,e,r){"use strict";var i=r(1).default;e.__esModule=!0;var n=i(r(2)),s=i(r(35)),a=r(36),o=r(41),l=i(r(42)),c=i(r(39)),u=i(r(34)),h=n.default.create;function p(){var t=h();return t.compile=function(e,r){return o.compile(e,r,t)},t.precompile=function(e,r){return o.precompile(e,r,t)},t.AST=s.default,t.Compiler=o.Compiler,t.JavaScriptCompiler=l.default,t.Parser=a.parser,t.parse=a.parse,t}var d=p();d.create=p,u.default(d),d.Visitor=c.default,d.default=d,e.default=d,t.exports=e.default},function(t,e){"use strict";e.default=function(t){return t&&t.__esModule?t:{default:t}},e.__esModule=!0},function(t,e,r){"use strict";var i=r(3).default,n=r(1).default;e.__esModule=!0;var s=i(r(4)),a=n(r(21)),o=n(r(6)),l=i(r(5)),c=i(r(22)),u=n(r(34));function h(){var t=new s.HandlebarsEnvironment;return l.extend(t,s),t.SafeString=a.default,t.Exception=o.default,t.Utils=l,t.escapeExpression=l.escapeExpression,t.VM=c,t.template=function(e){return c.template(e,t)},t}var p=h();p.create=h,u.default(p),p.default=p,e.default=p,t.exports=e.default},function(t,e){"use strict";e.default=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e},e.__esModule=!0},function(t,e,r){"use strict";var i=r(1).default;e.__esModule=!0,e.HandlebarsEnvironment=u;var n=r(5),s=i(r(6)),a=r(10),o=r(18),l=i(r(20));e.VERSION="4.0.11";e.COMPILER_REVISION=7;e.REVISION_CHANGES={1:"<= 1.0.rc.2",2:"== 1.0.0-rc.3",3:"== 1.0.0-rc.4",4:"== 1.x.x",5:"== 2.0.0-alpha.x",6:">= 2.0.0-beta.1",7:">= 4.0.0"};var c="[object Object]";function u(t,e,r){this.helpers=t||{},this.partials=e||{},this.decorators=r||{},a.registerDefaultHelpers(this),o.registerDefaultDecorators(this)}u.prototype={constructor:u,logger:l.default,log:l.default.log,registerHelper:function(t,e){if(n.toString.call(t)===c){if(e)throw new s.default("Arg not supported with multiple helpers");n.extend(this.helpers,t)}else this.helpers[t]=e},unregisterHelper:function(t){delete this.helpers[t]},registerPartial:function(t,e){if(n.toString.call(t)===c)n.extend(this.partials,t);else{if(void 0===e)throw new s.default('Attempting to register a partial called "'+t+'" as undefined');this.partials[t]=e}},unregisterPartial:function(t){delete this.partials[t]},registerDecorator:function(t,e){if(n.toString.call(t)===c){if(e)throw new s.default("Arg not supported with multiple decorators");n.extend(this.decorators,t)}else this.decorators[t]=e},unregisterDecorator:function(t){delete this.decorators[t]}};var h=l.default.log;e.log=h,e.createFrame=n.createFrame,e.logger=l.default},function(t,e){"use strict";e.__esModule=!0,e.extend=a,e.indexOf=function(t,e){for(var r=0,i=t.length;r<i;r++)if(t[r]===e)return r;return-1},e.escapeExpression=function(t){if("string"!=typeof t){if(t&&t.toHTML)return t.toHTML();if(null==t)return"";if(!t)return t+"";t=""+t}if(!n.test(t))return t;return t.replace(i,s)},e.isEmpty=function(t){return!t&&0!==t||!(!c(t)||0!==t.length)},e.createFrame=function(t){var e=a({},t);return e._parent=t,e},e.blockParams=function(t,e){return t.path=e,t},e.appendContextPath=function(t,e){return(t?t+".":"")+e};var r={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;","=":"&#x3D;"},i=/[&<>"'`=]/g,n=/[&<>"'`=]/;function s(t){return r[t]}function a(t){for(var e=1;e<arguments.length;e++)for(var r in arguments[e])Object.prototype.hasOwnProperty.call(arguments[e],r)&&(t[r]=arguments[e][r]);return t}var o=Object.prototype.toString;e.toString=o;var l=function(t){return"function"==typeof t};l(/x/)&&(e.isFunction=l=function(t){return"function"==typeof t&&"[object Function]"===o.call(t)}),e.isFunction=l;var c=Array.isArray||function(t){return!(!t||"object"!=typeof t)&&"[object Array]"===o.call(t)};e.isArray=c},function(t,e,r){"use strict";var i=r(7).default;e.__esModule=!0;var n=["description","fileName","lineNumber","message","name","number","stack"];function s(t,e){var r=e&&e.loc,a=void 0,o=void 0;r&&(t+=" - "+(a=r.start.line)+":"+(o=r.start.column));for(var l=Error.prototype.constructor.call(this,t),c=0;c<n.length;c++)this[n[c]]=l[n[c]];Error.captureStackTrace&&Error.captureStackTrace(this,s);try{r&&(this.lineNumber=a,i?Object.defineProperty(this,"column",{value:o,enumerable:!0}):this.column=o)}catch(t){}}s.prototype=new Error,e.default=s,t.exports=e.default},function(t,e,r){t.exports={default:r(8),__esModule:!0}},function(t,e,r){var i=r(9);t.exports=function(t,e,r){return i.setDesc(t,e,r)}},function(t,e){var r=Object;t.exports={create:r.create,getProto:r.getPrototypeOf,isEnum:{}.propertyIsEnumerable,getDesc:r.getOwnPropertyDescriptor,setDesc:r.defineProperty,setDescs:r.defineProperties,getKeys:r.keys,getNames:r.getOwnPropertyNames,getSymbols:r.getOwnPropertySymbols,each:[].forEach}},function(t,e,r){"use strict";var i=r(1).default;e.__esModule=!0,e.registerDefaultHelpers=function(t){n.default(t),s.default(t),a.default(t),o.default(t),l.default(t),c.default(t),u.default(t)};var n=i(r(11)),s=i(r(12)),a=i(r(13)),o=i(r(14)),l=i(r(15)),c=i(r(16)),u=i(r(17))},function(t,e,r){"use strict";e.__esModule=!0;var i=r(5);e.default=function(t){t.registerHelper("blockHelperMissing",function(e,r){var n=r.inverse,s=r.fn;if(!0===e)return s(this);if(!1===e||null==e)return n(this);if(i.isArray(e))return e.length>0?(r.ids&&(r.ids=[r.name]),t.helpers.each(e,r)):n(this);if(r.data&&r.ids){var a=i.createFrame(r.data);a.contextPath=i.appendContextPath(r.data.contextPath,r.name),r={data:a}}return s(e,r)})},t.exports=e.default},function(t,e,r){"use strict";var i=r(1).default;e.__esModule=!0;var n=r(5),s=i(r(6));e.default=function(t){t.registerHelper("each",function(t,e){if(!e)throw new s.default("Must pass iterator to #each");var r=e.fn,i=e.inverse,a=0,o="",l=void 0,c=void 0;function u(e,i,s){l&&(l.key=e,l.index=i,l.first=0===i,l.last=!!s,c&&(l.contextPath=c+e)),o+=r(t[e],{data:l,blockParams:n.blockParams([t[e],e],[c+e,null])})}if(e.data&&e.ids&&(c=n.appendContextPath(e.data.contextPath,e.ids[0])+"."),n.isFunction(t)&&(t=t.call(this)),e.data&&(l=n.createFrame(e.data)),t&&"object"==typeof t)if(n.isArray(t))for(var h=t.length;a<h;a++)a in t&&u(a,a,a===t.length-1);else{var p=void 0;for(var d in t)t.hasOwnProperty(d)&&(void 0!==p&&u(p,a-1),p=d,a++);void 0!==p&&u(p,a-1,!0)}return 0===a&&(o=i(this)),o})},t.exports=e.default},function(t,e,r){"use strict";var i=r(1).default;e.__esModule=!0;var n=i(r(6));e.default=function(t){t.registerHelper("helperMissing",function(){if(1!==arguments.length)throw new n.default('Missing helper: "'+arguments[arguments.length-1].name+'"')})},t.exports=e.default},function(t,e,r){"use strict";e.__esModule=!0;var i=r(5);e.default=function(t){t.registerHelper("if",function(t,e){return i.isFunction(t)&&(t=t.call(this)),!e.hash.includeZero&&!t||i.isEmpty(t)?e.inverse(this):e.fn(this)}),t.registerHelper("unless",function(e,r){return t.helpers.if.call(this,e,{fn:r.inverse,inverse:r.fn,hash:r.hash})})},t.exports=e.default},function(t,e){"use strict";e.__esModule=!0,e.default=function(t){t.registerHelper("log",function(){for(var e=[void 0],r=arguments[arguments.length-1],i=0;i<arguments.length-1;i++)e.push(arguments[i]);var n=1;null!=r.hash.level?n=r.hash.level:r.data&&null!=r.data.level&&(n=r.data.level),e[0]=n,t.log.apply(t,e)})},t.exports=e.default},function(t,e){"use strict";e.__esModule=!0,e.default=function(t){t.registerHelper("lookup",function(t,e){return t&&t[e]})},t.exports=e.default},function(t,e,r){"use strict";e.__esModule=!0;var i=r(5);e.default=function(t){t.registerHelper("with",function(t,e){i.isFunction(t)&&(t=t.call(this));var r=e.fn;if(i.isEmpty(t))return e.inverse(this);var n=e.data;return e.data&&e.ids&&((n=i.createFrame(e.data)).contextPath=i.appendContextPath(e.data.contextPath,e.ids[0])),r(t,{data:n,blockParams:i.blockParams([t],[n&&n.contextPath])})})},t.exports=e.default},function(t,e,r){"use strict";var i=r(1).default;e.__esModule=!0,e.registerDefaultDecorators=function(t){n.default(t)};var n=i(r(19))},function(t,e,r){"use strict";e.__esModule=!0;var i=r(5);e.default=function(t){t.registerDecorator("inline",function(t,e,r,n){var s=t;return e.partials||(e.partials={},s=function(n,s){var a=r.partials;r.partials=i.extend({},a,e.partials);var o=t(n,s);return r.partials=a,o}),e.partials[n.args[0]]=n.fn,s})},t.exports=e.default},function(t,e,r){"use strict";e.__esModule=!0;var i=r(5),n={methodMap:["debug","info","warn","error"],level:"info",lookupLevel:function(t){if("string"==typeof t){var e=i.indexOf(n.methodMap,t.toLowerCase());t=e>=0?e:parseInt(t,10)}return t},log:function(t){if(t=n.lookupLevel(t),"undefined"!=typeof console&&n.lookupLevel(n.level)<=t){var e=n.methodMap[t];console[e]||(e="log");for(var r=arguments.length,i=Array(r>1?r-1:0),s=1;s<r;s++)i[s-1]=arguments[s];console[e].apply(console,i)}}};e.default=n,t.exports=e.default},function(t,e){"use strict";function r(t){this.string=t}e.__esModule=!0,r.prototype.toString=r.prototype.toHTML=function(){return""+this.string},e.default=r,t.exports=e.default},function(t,e,r){"use strict";var i=r(23).default,n=r(3).default,s=r(1).default;e.__esModule=!0,e.checkRevision=function(t){var e=t&&t[0]||1,r=l.COMPILER_REVISION;if(e!==r){if(e<r){var i=l.REVISION_CHANGES[r],n=l.REVISION_CHANGES[e];throw new o.default("Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version ("+i+") or downgrade your runtime to an older version ("+n+").")}throw new o.default("Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version ("+t[1]+").")}},e.template=function(t,e){if(!e)throw new o.default("No environment passed to template");if(!t||!t.main)throw new o.default("Unknown template object: "+typeof t);t.main.decorator=t.main_d,e.VM.checkRevision(t.compiler);var r={strict:function(t,e){if(!(e in t))throw new o.default('"'+e+'" not defined in '+t);return t[e]},lookup:function(t,e){for(var r=t.length,i=0;i<r;i++)if(t[i]&&null!=t[i][e])return t[i][e]},lambda:function(t,e){return"function"==typeof t?t.call(e):t},escapeExpression:a.escapeExpression,invokePartial:function(r,i,n){n.hash&&(i=a.extend({},i,n.hash),n.ids&&(n.ids[0]=!0));r=e.VM.resolvePartial.call(this,r,i,n);var s=e.VM.invokePartial.call(this,r,i,n);null==s&&e.compile&&(n.partials[n.name]=e.compile(r,t.compilerOptions,e),s=n.partials[n.name](i,n));{if(null!=s){if(n.indent){for(var l=s.split("\n"),c=0,u=l.length;c<u&&(l[c]||c+1!==u);c++)l[c]=n.indent+l[c];s=l.join("\n")}return s}throw new o.default("The partial "+n.name+" could not be compiled when running in runtime-only mode")}},fn:function(e){var r=t[e];return r.decorator=t[e+"_d"],r},programs:[],program:function(t,e,r,i,n){var s=this.programs[t],a=this.fn(t);return e||n||i||r?s=c(this,t,a,e,r,i,n):s||(s=this.programs[t]=c(this,t,a)),s},data:function(t,e){for(;t&&e--;)t=t._parent;return t},merge:function(t,e){var r=t||e;return t&&e&&t!==e&&(r=a.extend({},e,t)),r},nullContext:i({}),noop:e.VM.noop,compilerInfo:t.compiler};function n(e){var i=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],s=i.data;n._setup(i),!i.partial&&t.useData&&(s=function(t,e){e&&"root"in e||((e=e?l.createFrame(e):{}).root=t);return e}(e,s));var a=void 0,o=t.useBlockParams?[]:void 0;function c(e){return""+t.main(r,e,r.helpers,r.partials,s,o,a)}return t.useDepths&&(a=i.depths?e!=i.depths[0]?[e].concat(i.depths):i.depths:[e]),(c=h(t.main,c,r,i.depths||[],s,o))(e,i)}return n.isTop=!0,n._setup=function(i){i.partial?(r.helpers=i.helpers,r.partials=i.partials,r.decorators=i.decorators):(r.helpers=r.merge(i.helpers,e.helpers),t.usePartial&&(r.partials=r.merge(i.partials,e.partials)),(t.usePartial||t.useDecorators)&&(r.decorators=r.merge(i.decorators,e.decorators)))},n._child=function(e,i,n,s){if(t.useBlockParams&&!n)throw new o.default("must pass block params");if(t.useDepths&&!s)throw new o.default("must pass parent depths");return c(r,e,t[e],i,0,n,s)},n},e.wrapProgram=c,e.resolvePartial=function(t,e,r){t?t.call||r.name||(r.name=t,t=r.partials[t]):t="@partial-block"===r.name?r.data["partial-block"]:r.partials[r.name];return t},e.invokePartial=function(t,e,r){var i=r.data&&r.data["partial-block"];r.partial=!0,r.ids&&(r.data.contextPath=r.ids[0]||r.data.contextPath);var n=void 0;r.fn&&r.fn!==u&&function(){r.data=l.createFrame(r.data);var t=r.fn;n=r.data["partial-block"]=function(e){var r=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];return r.data=l.createFrame(r.data),r.data["partial-block"]=i,t(e,r)},t.partials&&(r.partials=a.extend({},r.partials,t.partials))}();void 0===t&&n&&(t=n);{if(void 0===t)throw new o.default("The partial "+r.name+" could not be found");if(t instanceof Function)return t(e,r)}},e.noop=u;var a=n(r(5)),o=s(r(6)),l=r(4);function c(t,e,r,i,n,s,a){function o(e){var n=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],o=a;return!a||e==a[0]||e===t.nullContext&&null===a[0]||(o=[e].concat(a)),r(t,e,t.helpers,t.partials,n.data||i,s&&[n.blockParams].concat(s),o)}return(o=h(r,o,t,a,i,s)).program=e,o.depth=a?a.length:0,o.blockParams=n||0,o}function u(){return""}function h(t,e,r,i,n,s){if(t.decorator){var o={};e=t.decorator(e,o,r,i&&i[0],n,s,i),a.extend(e,o)}return e}},function(t,e,r){t.exports={default:r(24),__esModule:!0}},function(t,e,r){r(25),t.exports=r(30).Object.seal},function(t,e,r){var i=r(26);r(27)("seal",function(t){return function(e){return t&&i(e)?t(e):e}})},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,r){var i=r(28),n=r(30),s=r(33);t.exports=function(t,e){var r=(n.Object||{})[t]||Object[t],a={};a[t]=e(r),i(i.S+i.F*s(function(){r(1)}),"Object",a)}},function(t,e,r){var i=r(29),n=r(30),s=r(31),a="prototype",o=function(t,e,r){var l,c,u,h=t&o.F,p=t&o.G,d=t&o.S,f=t&o.P,m=t&o.B,g=t&o.W,v=p?n:n[e]||(n[e]={}),y=p?i:d?i[e]:(i[e]||{})[a];for(l in p&&(r=e),r)(c=!h&&y&&l in y)&&l in v||(u=c?y[l]:r[l],v[l]=p&&"function"!=typeof y[l]?r[l]:m&&c?s(u,i):g&&y[l]==u?function(t){var e=function(e){return this instanceof t?new t(e):t(e)};return e[a]=t[a],e}(u):f&&"function"==typeof u?s(Function.call,u):u,f&&((v[a]||(v[a]={}))[l]=u))};o.F=1,o.G=2,o.S=4,o.P=8,o.B=16,o.W=32,t.exports=o},function(t,e){var r=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=r)},function(t,e){var r=t.exports={version:"1.2.6"};"number"==typeof __e&&(__e=r)},function(t,e,r){var i=r(32);t.exports=function(t,e,r){if(i(t),void 0===e)return t;switch(r){case 1:return function(r){return t.call(e,r)};case 2:return function(r,i){return t.call(e,r,i)};case 3:return function(r,i,n){return t.call(e,r,i,n)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e){(function(r){"use strict";e.__esModule=!0,e.default=function(t){var e=void 0!==r?r:window,i=e.Handlebars;t.noConflict=function(){return e.Handlebars===t&&(e.Handlebars=i),t}},t.exports=e.default}).call(e,function(){return this}())},function(t,e){"use strict";e.__esModule=!0;var r={helpers:{helperExpression:function(t){return"SubExpression"===t.type||("MustacheStatement"===t.type||"BlockStatement"===t.type)&&!!(t.params&&t.params.length||t.hash)},scopedId:function(t){return/^\.|this\b/.test(t.original)},simpleId:function(t){return 1===t.parts.length&&!r.helpers.scopedId(t)&&!t.depth}}};e.default=r,t.exports=e.default},function(t,e,r){"use strict";var i=r(1).default,n=r(3).default;e.__esModule=!0,e.parse=function(t,e){if("Program"===t.type)return t;return s.default.yy=c,c.locInfo=function(t){return new c.SourceLocation(e&&e.srcName,t)},new a.default(e).accept(s.default.parse(t))};var s=i(r(37)),a=i(r(38)),o=n(r(40)),l=r(5);e.parser=s.default;var c={};l.extend(c,o)},function(t,e){"use strict";e.__esModule=!0;var r=function(){var t={trace:function(){},yy:{},symbols_:{error:2,root:3,program:4,EOF:5,program_repetition0:6,statement:7,mustache:8,block:9,rawBlock:10,partial:11,partialBlock:12,content:13,COMMENT:14,CONTENT:15,openRawBlock:16,rawBlock_repetition_plus0:17,END_RAW_BLOCK:18,OPEN_RAW_BLOCK:19,helperName:20,openRawBlock_repetition0:21,openRawBlock_option0:22,CLOSE_RAW_BLOCK:23,openBlock:24,block_option0:25,closeBlock:26,openInverse:27,block_option1:28,OPEN_BLOCK:29,openBlock_repetition0:30,openBlock_option0:31,openBlock_option1:32,CLOSE:33,OPEN_INVERSE:34,openInverse_repetition0:35,openInverse_option0:36,openInverse_option1:37,openInverseChain:38,OPEN_INVERSE_CHAIN:39,openInverseChain_repetition0:40,openInverseChain_option0:41,openInverseChain_option1:42,inverseAndProgram:43,INVERSE:44,inverseChain:45,inverseChain_option0:46,OPEN_ENDBLOCK:47,OPEN:48,mustache_repetition0:49,mustache_option0:50,OPEN_UNESCAPED:51,mustache_repetition1:52,mustache_option1:53,CLOSE_UNESCAPED:54,OPEN_PARTIAL:55,partialName:56,partial_repetition0:57,partial_option0:58,openPartialBlock:59,OPEN_PARTIAL_BLOCK:60,openPartialBlock_repetition0:61,openPartialBlock_option0:62,param:63,sexpr:64,OPEN_SEXPR:65,sexpr_repetition0:66,sexpr_option0:67,CLOSE_SEXPR:68,hash:69,hash_repetition_plus0:70,hashSegment:71,ID:72,EQUALS:73,blockParams:74,OPEN_BLOCK_PARAMS:75,blockParams_repetition_plus0:76,CLOSE_BLOCK_PARAMS:77,path:78,dataName:79,STRING:80,NUMBER:81,BOOLEAN:82,UNDEFINED:83,NULL:84,DATA:85,pathSegments:86,SEP:87,$accept:0,$end:1},terminals_:{2:"error",5:"EOF",14:"COMMENT",15:"CONTENT",18:"END_RAW_BLOCK",19:"OPEN_RAW_BLOCK",23:"CLOSE_RAW_BLOCK",29:"OPEN_BLOCK",33:"CLOSE",34:"OPEN_INVERSE",39:"OPEN_INVERSE_CHAIN",44:"INVERSE",47:"OPEN_ENDBLOCK",48:"OPEN",51:"OPEN_UNESCAPED",54:"CLOSE_UNESCAPED",55:"OPEN_PARTIAL",60:"OPEN_PARTIAL_BLOCK",65:"OPEN_SEXPR",68:"CLOSE_SEXPR",72:"ID",73:"EQUALS",75:"OPEN_BLOCK_PARAMS",77:"CLOSE_BLOCK_PARAMS",80:"STRING",81:"NUMBER",82:"BOOLEAN",83:"UNDEFINED",84:"NULL",85:"DATA",87:"SEP"},productions_:[0,[3,2],[4,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[13,1],[10,3],[16,5],[9,4],[9,4],[24,6],[27,6],[38,6],[43,2],[45,3],[45,1],[26,3],[8,5],[8,5],[11,5],[12,3],[59,5],[63,1],[63,1],[64,5],[69,1],[71,3],[74,3],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[56,1],[56,1],[79,2],[78,1],[86,3],[86,1],[6,0],[6,2],[17,1],[17,2],[21,0],[21,2],[22,0],[22,1],[25,0],[25,1],[28,0],[28,1],[30,0],[30,2],[31,0],[31,1],[32,0],[32,1],[35,0],[35,2],[36,0],[36,1],[37,0],[37,1],[40,0],[40,2],[41,0],[41,1],[42,0],[42,1],[46,0],[46,1],[49,0],[49,2],[50,0],[50,1],[52,0],[52,2],[53,0],[53,1],[57,0],[57,2],[58,0],[58,1],[61,0],[61,2],[62,0],[62,1],[66,0],[66,2],[67,0],[67,1],[70,1],[70,2],[76,1],[76,2]],performAction:function(t,e,r,i,n,s,a){var o=s.length-1;switch(n){case 1:return s[o-1];case 2:this.$=i.prepareProgram(s[o]);break;case 3:case 4:case 5:case 6:case 7:case 8:this.$=s[o];break;case 9:this.$={type:"CommentStatement",value:i.stripComment(s[o]),strip:i.stripFlags(s[o],s[o]),loc:i.locInfo(this._$)};break;case 10:this.$={type:"ContentStatement",original:s[o],value:s[o],loc:i.locInfo(this._$)};break;case 11:this.$=i.prepareRawBlock(s[o-2],s[o-1],s[o],this._$);break;case 12:this.$={path:s[o-3],params:s[o-2],hash:s[o-1]};break;case 13:this.$=i.prepareBlock(s[o-3],s[o-2],s[o-1],s[o],!1,this._$);break;case 14:this.$=i.prepareBlock(s[o-3],s[o-2],s[o-1],s[o],!0,this._$);break;case 15:this.$={open:s[o-5],path:s[o-4],params:s[o-3],hash:s[o-2],blockParams:s[o-1],strip:i.stripFlags(s[o-5],s[o])};break;case 16:case 17:this.$={path:s[o-4],params:s[o-3],hash:s[o-2],blockParams:s[o-1],strip:i.stripFlags(s[o-5],s[o])};break;case 18:this.$={strip:i.stripFlags(s[o-1],s[o-1]),program:s[o]};break;case 19:var l=i.prepareBlock(s[o-2],s[o-1],s[o],s[o],!1,this._$),c=i.prepareProgram([l],s[o-1].loc);c.chained=!0,this.$={strip:s[o-2].strip,program:c,chain:!0};break;case 20:this.$=s[o];break;case 21:this.$={path:s[o-1],strip:i.stripFlags(s[o-2],s[o])};break;case 22:case 23:this.$=i.prepareMustache(s[o-3],s[o-2],s[o-1],s[o-4],i.stripFlags(s[o-4],s[o]),this._$);break;case 24:this.$={type:"PartialStatement",name:s[o-3],params:s[o-2],hash:s[o-1],indent:"",strip:i.stripFlags(s[o-4],s[o]),loc:i.locInfo(this._$)};break;case 25:this.$=i.preparePartialBlock(s[o-2],s[o-1],s[o],this._$);break;case 26:this.$={path:s[o-3],params:s[o-2],hash:s[o-1],strip:i.stripFlags(s[o-4],s[o])};break;case 27:case 28:this.$=s[o];break;case 29:this.$={type:"SubExpression",path:s[o-3],params:s[o-2],hash:s[o-1],loc:i.locInfo(this._$)};break;case 30:this.$={type:"Hash",pairs:s[o],loc:i.locInfo(this._$)};break;case 31:this.$={type:"HashPair",key:i.id(s[o-2]),value:s[o],loc:i.locInfo(this._$)};break;case 32:this.$=i.id(s[o-1]);break;case 33:case 34:this.$=s[o];break;case 35:this.$={type:"StringLiteral",value:s[o],original:s[o],loc:i.locInfo(this._$)};break;case 36:this.$={type:"NumberLiteral",value:Number(s[o]),original:Number(s[o]),loc:i.locInfo(this._$)};break;case 37:this.$={type:"BooleanLiteral",value:"true"===s[o],original:"true"===s[o],loc:i.locInfo(this._$)};break;case 38:this.$={type:"UndefinedLiteral",original:void 0,value:void 0,loc:i.locInfo(this._$)};break;case 39:this.$={type:"NullLiteral",original:null,value:null,loc:i.locInfo(this._$)};break;case 40:case 41:this.$=s[o];break;case 42:this.$=i.preparePath(!0,s[o],this._$);break;case 43:this.$=i.preparePath(!1,s[o],this._$);break;case 44:s[o-2].push({part:i.id(s[o]),original:s[o],separator:s[o-1]}),this.$=s[o-2];break;case 45:this.$=[{part:i.id(s[o]),original:s[o]}];break;case 46:this.$=[];break;case 47:s[o-1].push(s[o]);break;case 48:this.$=[s[o]];break;case 49:s[o-1].push(s[o]);break;case 50:this.$=[];break;case 51:s[o-1].push(s[o]);break;case 58:this.$=[];break;case 59:s[o-1].push(s[o]);break;case 64:this.$=[];break;case 65:s[o-1].push(s[o]);break;case 70:this.$=[];break;case 71:s[o-1].push(s[o]);break;case 78:this.$=[];break;case 79:s[o-1].push(s[o]);break;case 82:this.$=[];break;case 83:s[o-1].push(s[o]);break;case 86:this.$=[];break;case 87:s[o-1].push(s[o]);break;case 90:this.$=[];break;case 91:s[o-1].push(s[o]);break;case 94:this.$=[];break;case 95:s[o-1].push(s[o]);break;case 98:this.$=[s[o]];break;case 99:s[o-1].push(s[o]);break;case 100:this.$=[s[o]];break;case 101:s[o-1].push(s[o])}},table:[{3:1,4:2,5:[2,46],6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{1:[3]},{5:[1,4]},{5:[2,2],7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:[1,12],15:[1,20],16:17,19:[1,23],24:15,27:16,29:[1,21],34:[1,22],39:[2,2],44:[2,2],47:[2,2],48:[1,13],51:[1,14],55:[1,18],59:19,60:[1,24]},{1:[2,1]},{5:[2,47],14:[2,47],15:[2,47],19:[2,47],29:[2,47],34:[2,47],39:[2,47],44:[2,47],47:[2,47],48:[2,47],51:[2,47],55:[2,47],60:[2,47]},{5:[2,3],14:[2,3],15:[2,3],19:[2,3],29:[2,3],34:[2,3],39:[2,3],44:[2,3],47:[2,3],48:[2,3],51:[2,3],55:[2,3],60:[2,3]},{5:[2,4],14:[2,4],15:[2,4],19:[2,4],29:[2,4],34:[2,4],39:[2,4],44:[2,4],47:[2,4],48:[2,4],51:[2,4],55:[2,4],60:[2,4]},{5:[2,5],14:[2,5],15:[2,5],19:[2,5],29:[2,5],34:[2,5],39:[2,5],44:[2,5],47:[2,5],48:[2,5],51:[2,5],55:[2,5],60:[2,5]},{5:[2,6],14:[2,6],15:[2,6],19:[2,6],29:[2,6],34:[2,6],39:[2,6],44:[2,6],47:[2,6],48:[2,6],51:[2,6],55:[2,6],60:[2,6]},{5:[2,7],14:[2,7],15:[2,7],19:[2,7],29:[2,7],34:[2,7],39:[2,7],44:[2,7],47:[2,7],48:[2,7],51:[2,7],55:[2,7],60:[2,7]},{5:[2,8],14:[2,8],15:[2,8],19:[2,8],29:[2,8],34:[2,8],39:[2,8],44:[2,8],47:[2,8],48:[2,8],51:[2,8],55:[2,8],60:[2,8]},{5:[2,9],14:[2,9],15:[2,9],19:[2,9],29:[2,9],34:[2,9],39:[2,9],44:[2,9],47:[2,9],48:[2,9],51:[2,9],55:[2,9],60:[2,9]},{20:25,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:36,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{4:37,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],39:[2,46],44:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{4:38,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],44:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{13:40,15:[1,20],17:39},{20:42,56:41,64:43,65:[1,44],72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{4:45,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{5:[2,10],14:[2,10],15:[2,10],18:[2,10],19:[2,10],29:[2,10],34:[2,10],39:[2,10],44:[2,10],47:[2,10],48:[2,10],51:[2,10],55:[2,10],60:[2,10]},{20:46,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:47,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:48,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:42,56:49,64:43,65:[1,44],72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{33:[2,78],49:50,65:[2,78],72:[2,78],80:[2,78],81:[2,78],82:[2,78],83:[2,78],84:[2,78],85:[2,78]},{23:[2,33],33:[2,33],54:[2,33],65:[2,33],68:[2,33],72:[2,33],75:[2,33],80:[2,33],81:[2,33],82:[2,33],83:[2,33],84:[2,33],85:[2,33]},{23:[2,34],33:[2,34],54:[2,34],65:[2,34],68:[2,34],72:[2,34],75:[2,34],80:[2,34],81:[2,34],82:[2,34],83:[2,34],84:[2,34],85:[2,34]},{23:[2,35],33:[2,35],54:[2,35],65:[2,35],68:[2,35],72:[2,35],75:[2,35],80:[2,35],81:[2,35],82:[2,35],83:[2,35],84:[2,35],85:[2,35]},{23:[2,36],33:[2,36],54:[2,36],65:[2,36],68:[2,36],72:[2,36],75:[2,36],80:[2,36],81:[2,36],82:[2,36],83:[2,36],84:[2,36],85:[2,36]},{23:[2,37],33:[2,37],54:[2,37],65:[2,37],68:[2,37],72:[2,37],75:[2,37],80:[2,37],81:[2,37],82:[2,37],83:[2,37],84:[2,37],85:[2,37]},{23:[2,38],33:[2,38],54:[2,38],65:[2,38],68:[2,38],72:[2,38],75:[2,38],80:[2,38],81:[2,38],82:[2,38],83:[2,38],84:[2,38],85:[2,38]},{23:[2,39],33:[2,39],54:[2,39],65:[2,39],68:[2,39],72:[2,39],75:[2,39],80:[2,39],81:[2,39],82:[2,39],83:[2,39],84:[2,39],85:[2,39]},{23:[2,43],33:[2,43],54:[2,43],65:[2,43],68:[2,43],72:[2,43],75:[2,43],80:[2,43],81:[2,43],82:[2,43],83:[2,43],84:[2,43],85:[2,43],87:[1,51]},{72:[1,35],86:52},{23:[2,45],33:[2,45],54:[2,45],65:[2,45],68:[2,45],72:[2,45],75:[2,45],80:[2,45],81:[2,45],82:[2,45],83:[2,45],84:[2,45],85:[2,45],87:[2,45]},{52:53,54:[2,82],65:[2,82],72:[2,82],80:[2,82],81:[2,82],82:[2,82],83:[2,82],84:[2,82],85:[2,82]},{25:54,38:56,39:[1,58],43:57,44:[1,59],45:55,47:[2,54]},{28:60,43:61,44:[1,59],47:[2,56]},{13:63,15:[1,20],18:[1,62]},{15:[2,48],18:[2,48]},{33:[2,86],57:64,65:[2,86],72:[2,86],80:[2,86],81:[2,86],82:[2,86],83:[2,86],84:[2,86],85:[2,86]},{33:[2,40],65:[2,40],72:[2,40],80:[2,40],81:[2,40],82:[2,40],83:[2,40],84:[2,40],85:[2,40]},{33:[2,41],65:[2,41],72:[2,41],80:[2,41],81:[2,41],82:[2,41],83:[2,41],84:[2,41],85:[2,41]},{20:65,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{26:66,47:[1,67]},{30:68,33:[2,58],65:[2,58],72:[2,58],75:[2,58],80:[2,58],81:[2,58],82:[2,58],83:[2,58],84:[2,58],85:[2,58]},{33:[2,64],35:69,65:[2,64],72:[2,64],75:[2,64],80:[2,64],81:[2,64],82:[2,64],83:[2,64],84:[2,64],85:[2,64]},{21:70,23:[2,50],65:[2,50],72:[2,50],80:[2,50],81:[2,50],82:[2,50],83:[2,50],84:[2,50],85:[2,50]},{33:[2,90],61:71,65:[2,90],72:[2,90],80:[2,90],81:[2,90],82:[2,90],83:[2,90],84:[2,90],85:[2,90]},{20:75,33:[2,80],50:72,63:73,64:76,65:[1,44],69:74,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{72:[1,80]},{23:[2,42],33:[2,42],54:[2,42],65:[2,42],68:[2,42],72:[2,42],75:[2,42],80:[2,42],81:[2,42],82:[2,42],83:[2,42],84:[2,42],85:[2,42],87:[1,51]},{20:75,53:81,54:[2,84],63:82,64:76,65:[1,44],69:83,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{26:84,47:[1,67]},{47:[2,55]},{4:85,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],39:[2,46],44:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{47:[2,20]},{20:86,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{4:87,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{26:88,47:[1,67]},{47:[2,57]},{5:[2,11],14:[2,11],15:[2,11],19:[2,11],29:[2,11],34:[2,11],39:[2,11],44:[2,11],47:[2,11],48:[2,11],51:[2,11],55:[2,11],60:[2,11]},{15:[2,49],18:[2,49]},{20:75,33:[2,88],58:89,63:90,64:76,65:[1,44],69:91,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{65:[2,94],66:92,68:[2,94],72:[2,94],80:[2,94],81:[2,94],82:[2,94],83:[2,94],84:[2,94],85:[2,94]},{5:[2,25],14:[2,25],15:[2,25],19:[2,25],29:[2,25],34:[2,25],39:[2,25],44:[2,25],47:[2,25],48:[2,25],51:[2,25],55:[2,25],60:[2,25]},{20:93,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:75,31:94,33:[2,60],63:95,64:76,65:[1,44],69:96,70:77,71:78,72:[1,79],75:[2,60],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:75,33:[2,66],36:97,63:98,64:76,65:[1,44],69:99,70:77,71:78,72:[1,79],75:[2,66],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:75,22:100,23:[2,52],63:101,64:76,65:[1,44],69:102,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:75,33:[2,92],62:103,63:104,64:76,65:[1,44],69:105,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{33:[1,106]},{33:[2,79],65:[2,79],72:[2,79],80:[2,79],81:[2,79],82:[2,79],83:[2,79],84:[2,79],85:[2,79]},{33:[2,81]},{23:[2,27],33:[2,27],54:[2,27],65:[2,27],68:[2,27],72:[2,27],75:[2,27],80:[2,27],81:[2,27],82:[2,27],83:[2,27],84:[2,27],85:[2,27]},{23:[2,28],33:[2,28],54:[2,28],65:[2,28],68:[2,28],72:[2,28],75:[2,28],80:[2,28],81:[2,28],82:[2,28],83:[2,28],84:[2,28],85:[2,28]},{23:[2,30],33:[2,30],54:[2,30],68:[2,30],71:107,72:[1,108],75:[2,30]},{23:[2,98],33:[2,98],54:[2,98],68:[2,98],72:[2,98],75:[2,98]},{23:[2,45],33:[2,45],54:[2,45],65:[2,45],68:[2,45],72:[2,45],73:[1,109],75:[2,45],80:[2,45],81:[2,45],82:[2,45],83:[2,45],84:[2,45],85:[2,45],87:[2,45]},{23:[2,44],33:[2,44],54:[2,44],65:[2,44],68:[2,44],72:[2,44],75:[2,44],80:[2,44],81:[2,44],82:[2,44],83:[2,44],84:[2,44],85:[2,44],87:[2,44]},{54:[1,110]},{54:[2,83],65:[2,83],72:[2,83],80:[2,83],81:[2,83],82:[2,83],83:[2,83],84:[2,83],85:[2,83]},{54:[2,85]},{5:[2,13],14:[2,13],15:[2,13],19:[2,13],29:[2,13],34:[2,13],39:[2,13],44:[2,13],47:[2,13],48:[2,13],51:[2,13],55:[2,13],60:[2,13]},{38:56,39:[1,58],43:57,44:[1,59],45:112,46:111,47:[2,76]},{33:[2,70],40:113,65:[2,70],72:[2,70],75:[2,70],80:[2,70],81:[2,70],82:[2,70],83:[2,70],84:[2,70],85:[2,70]},{47:[2,18]},{5:[2,14],14:[2,14],15:[2,14],19:[2,14],29:[2,14],34:[2,14],39:[2,14],44:[2,14],47:[2,14],48:[2,14],51:[2,14],55:[2,14],60:[2,14]},{33:[1,114]},{33:[2,87],65:[2,87],72:[2,87],80:[2,87],81:[2,87],82:[2,87],83:[2,87],84:[2,87],85:[2,87]},{33:[2,89]},{20:75,63:116,64:76,65:[1,44],67:115,68:[2,96],69:117,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{33:[1,118]},{32:119,33:[2,62],74:120,75:[1,121]},{33:[2,59],65:[2,59],72:[2,59],75:[2,59],80:[2,59],81:[2,59],82:[2,59],83:[2,59],84:[2,59],85:[2,59]},{33:[2,61],75:[2,61]},{33:[2,68],37:122,74:123,75:[1,121]},{33:[2,65],65:[2,65],72:[2,65],75:[2,65],80:[2,65],81:[2,65],82:[2,65],83:[2,65],84:[2,65],85:[2,65]},{33:[2,67],75:[2,67]},{23:[1,124]},{23:[2,51],65:[2,51],72:[2,51],80:[2,51],81:[2,51],82:[2,51],83:[2,51],84:[2,51],85:[2,51]},{23:[2,53]},{33:[1,125]},{33:[2,91],65:[2,91],72:[2,91],80:[2,91],81:[2,91],82:[2,91],83:[2,91],84:[2,91],85:[2,91]},{33:[2,93]},{5:[2,22],14:[2,22],15:[2,22],19:[2,22],29:[2,22],34:[2,22],39:[2,22],44:[2,22],47:[2,22],48:[2,22],51:[2,22],55:[2,22],60:[2,22]},{23:[2,99],33:[2,99],54:[2,99],68:[2,99],72:[2,99],75:[2,99]},{73:[1,109]},{20:75,63:126,64:76,65:[1,44],72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{5:[2,23],14:[2,23],15:[2,23],19:[2,23],29:[2,23],34:[2,23],39:[2,23],44:[2,23],47:[2,23],48:[2,23],51:[2,23],55:[2,23],60:[2,23]},{47:[2,19]},{47:[2,77]},{20:75,33:[2,72],41:127,63:128,64:76,65:[1,44],69:129,70:77,71:78,72:[1,79],75:[2,72],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{5:[2,24],14:[2,24],15:[2,24],19:[2,24],29:[2,24],34:[2,24],39:[2,24],44:[2,24],47:[2,24],48:[2,24],51:[2,24],55:[2,24],60:[2,24]},{68:[1,130]},{65:[2,95],68:[2,95],72:[2,95],80:[2,95],81:[2,95],82:[2,95],83:[2,95],84:[2,95],85:[2,95]},{68:[2,97]},{5:[2,21],14:[2,21],15:[2,21],19:[2,21],29:[2,21],34:[2,21],39:[2,21],44:[2,21],47:[2,21],48:[2,21],51:[2,21],55:[2,21],60:[2,21]},{33:[1,131]},{33:[2,63]},{72:[1,133],76:132},{33:[1,134]},{33:[2,69]},{15:[2,12]},{14:[2,26],15:[2,26],19:[2,26],29:[2,26],34:[2,26],47:[2,26],48:[2,26],51:[2,26],55:[2,26],60:[2,26]},{23:[2,31],33:[2,31],54:[2,31],68:[2,31],72:[2,31],75:[2,31]},{33:[2,74],42:135,74:136,75:[1,121]},{33:[2,71],65:[2,71],72:[2,71],75:[2,71],80:[2,71],81:[2,71],82:[2,71],83:[2,71],84:[2,71],85:[2,71]},{33:[2,73],75:[2,73]},{23:[2,29],33:[2,29],54:[2,29],65:[2,29],68:[2,29],72:[2,29],75:[2,29],80:[2,29],81:[2,29],82:[2,29],83:[2,29],84:[2,29],85:[2,29]},{14:[2,15],15:[2,15],19:[2,15],29:[2,15],34:[2,15],39:[2,15],44:[2,15],47:[2,15],48:[2,15],51:[2,15],55:[2,15],60:[2,15]},{72:[1,138],77:[1,137]},{72:[2,100],77:[2,100]},{14:[2,16],15:[2,16],19:[2,16],29:[2,16],34:[2,16],44:[2,16],47:[2,16],48:[2,16],51:[2,16],55:[2,16],60:[2,16]},{33:[1,139]},{33:[2,75]},{33:[2,32]},{72:[2,101],77:[2,101]},{14:[2,17],15:[2,17],19:[2,17],29:[2,17],34:[2,17],39:[2,17],44:[2,17],47:[2,17],48:[2,17],51:[2,17],55:[2,17],60:[2,17]}],defaultActions:{4:[2,1],55:[2,55],57:[2,20],61:[2,57],74:[2,81],83:[2,85],87:[2,18],91:[2,89],102:[2,53],105:[2,93],111:[2,19],112:[2,77],117:[2,97],120:[2,63],123:[2,69],124:[2,12],136:[2,75],137:[2,32]},parseError:function(t,e){throw new Error(t)},parse:function(t){var e=this,r=[0],i=[null],n=[],s=this.table,a="",o=0,l=0,c=0;this.lexer.setInput(t),this.lexer.yy=this.yy,this.yy.lexer=this.lexer,this.yy.parser=this,void 0===this.lexer.yylloc&&(this.lexer.yylloc={});var u=this.lexer.yylloc;n.push(u);var h=this.lexer.options&&this.lexer.options.ranges;"function"==typeof this.yy.parseError&&(this.parseError=this.yy.parseError);for(var p,d,f,m,g,v,y,k,S,_,b={};;){if(f=r[r.length-1],this.defaultActions[f]?m=this.defaultActions[f]:(null==p&&(_=void 0,"number"!=typeof(_=e.lexer.lex()||1)&&(_=e.symbols_[_]||_),p=_),m=s[f]&&s[f][p]),void 0===m||!m.length||!m[0]){var P="";if(!c){for(v in S=[],s[f])this.terminals_[v]&&v>2&&S.push("'"+this.terminals_[v]+"'");P=this.lexer.showPosition?"Parse error on line "+(o+1)+":\n"+this.lexer.showPosition()+"\nExpecting "+S.join(", ")+", got '"+(this.terminals_[p]||p)+"'":"Parse error on line "+(o+1)+": Unexpected "+(1==p?"end of input":"'"+(this.terminals_[p]||p)+"'"),this.parseError(P,{text:this.lexer.match,token:this.terminals_[p]||p,line:this.lexer.yylineno,loc:u,expected:S})}}if(m[0]instanceof Array&&m.length>1)throw new Error("Parse Error: multiple actions possible at state: "+f+", token: "+p);switch(m[0]){case 1:r.push(p),i.push(this.lexer.yytext),n.push(this.lexer.yylloc),r.push(m[1]),p=null,d?(p=d,d=null):(l=this.lexer.yyleng,a=this.lexer.yytext,o=this.lexer.yylineno,u=this.lexer.yylloc,c>0&&c--);break;case 2:if(y=this.productions_[m[1]][1],b.$=i[i.length-y],b._$={first_line:n[n.length-(y||1)].first_line,last_line:n[n.length-1].last_line,first_column:n[n.length-(y||1)].first_column,last_column:n[n.length-1].last_column},h&&(b._$.range=[n[n.length-(y||1)].range[0],n[n.length-1].range[1]]),void 0!==(g=this.performAction.call(b,a,l,o,this.yy,m[1],i,n)))return g;y&&(r=r.slice(0,-1*y*2),i=i.slice(0,-1*y),n=n.slice(0,-1*y)),r.push(this.productions_[m[1]][0]),i.push(b.$),n.push(b._$),k=s[r[r.length-2]][r[r.length-1]],r.push(k);break;case 3:return!0}}return!0}},e={EOF:1,parseError:function(t,e){if(!this.yy.parser)throw new Error(t);this.yy.parser.parseError(t,e)},setInput:function(t){return this._input=t,this._more=this._less=this.done=!1,this.yylineno=this.yyleng=0,this.yytext=this.matched=this.match="",this.conditionStack=["INITIAL"],this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0},this.options.ranges&&(this.yylloc.range=[0,0]),this.offset=0,this},input:function(){var t=this._input[0];return this.yytext+=t,this.yyleng++,this.offset++,this.match+=t,this.matched+=t,t.match(/(?:\r\n?|\n).*/g)?(this.yylineno++,this.yylloc.last_line++):this.yylloc.last_column++,this.options.ranges&&this.yylloc.range[1]++,this._input=this._input.slice(1),t},unput:function(t){var e=t.length,r=t.split(/(?:\r\n?|\n)/g);this._input=t+this._input,this.yytext=this.yytext.substr(0,this.yytext.length-e-1),this.offset-=e;var i=this.match.split(/(?:\r\n?|\n)/g);this.match=this.match.substr(0,this.match.length-1),this.matched=this.matched.substr(0,this.matched.length-1),r.length-1&&(this.yylineno-=r.length-1);var n=this.yylloc.range;return this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:r?(r.length===i.length?this.yylloc.first_column:0)+i[i.length-r.length].length-r[0].length:this.yylloc.first_column-e},this.options.ranges&&(this.yylloc.range=[n[0],n[0]+this.yyleng-e]),this},more:function(){return this._more=!0,this},less:function(t){this.unput(this.match.slice(t))},pastInput:function(){var t=this.matched.substr(0,this.matched.length-this.match.length);return(t.length>20?"...":"")+t.substr(-20).replace(/\n/g,"")},upcomingInput:function(){var t=this.match;return t.length<20&&(t+=this._input.substr(0,20-t.length)),(t.substr(0,20)+(t.length>20?"...":"")).replace(/\n/g,"")},showPosition:function(){var t=this.pastInput(),e=new Array(t.length+1).join("-");return t+this.upcomingInput()+"\n"+e+"^"},next:function(){if(this.done)return this.EOF;var t,e,r,i,n;this._input||(this.done=!0),this._more||(this.yytext="",this.match="");for(var s=this._currentRules(),a=0;a<s.length&&(!(r=this._input.match(this.rules[s[a]]))||e&&!(r[0].length>e[0].length)||(e=r,i=a,this.options.flex));a++);return e?((n=e[0].match(/(?:\r\n?|\n).*/g))&&(this.yylineno+=n.length),this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:n?n[n.length-1].length-n[n.length-1].match(/\r?\n?/)[0].length:this.yylloc.last_column+e[0].length},this.yytext+=e[0],this.match+=e[0],this.matches=e,this.yyleng=this.yytext.length,this.options.ranges&&(this.yylloc.range=[this.offset,this.offset+=this.yyleng]),this._more=!1,this._input=this._input.slice(e[0].length),this.matched+=e[0],t=this.performAction.call(this,this.yy,this,s[i],this.conditionStack[this.conditionStack.length-1]),this.done&&this._input&&(this.done=!1),t||void 0):""===this._input?this.EOF:this.parseError("Lexical error on line "+(this.yylineno+1)+". Unrecognized text.\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})},lex:function(){var t=this.next();return void 0!==t?t:this.lex()},begin:function(t){this.conditionStack.push(t)},popState:function(){return this.conditionStack.pop()},_currentRules:function(){return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules},topState:function(){return this.conditionStack[this.conditionStack.length-2]},pushState:function(t){this.begin(t)},options:{},performAction:function(t,e,r,i){function n(t,r){return e.yytext=e.yytext.substr(t,e.yyleng-r)}switch(r){case 0:if("\\\\"===e.yytext.slice(-2)?(n(0,1),this.begin("mu")):"\\"===e.yytext.slice(-1)?(n(0,1),this.begin("emu")):this.begin("mu"),e.yytext)return 15;break;case 1:return 15;case 2:return this.popState(),15;case 3:return this.begin("raw"),15;case 4:return this.popState(),"raw"===this.conditionStack[this.conditionStack.length-1]?15:(e.yytext=e.yytext.substr(5,e.yyleng-9),"END_RAW_BLOCK");case 5:return 15;case 6:return this.popState(),14;case 7:return 65;case 8:return 68;case 9:return 19;case 10:return this.popState(),this.begin("raw"),23;case 11:return 55;case 12:return 60;case 13:return 29;case 14:return 47;case 15:case 16:return this.popState(),44;case 17:return 34;case 18:return 39;case 19:return 51;case 20:return 48;case 21:this.unput(e.yytext),this.popState(),this.begin("com");break;case 22:return this.popState(),14;case 23:return 48;case 24:return 73;case 25:case 26:return 72;case 27:return 87;case 28:break;case 29:return this.popState(),54;case 30:return this.popState(),33;case 31:return e.yytext=n(1,2).replace(/\\"/g,'"'),80;case 32:return e.yytext=n(1,2).replace(/\\'/g,"'"),80;case 33:return 85;case 34:case 35:return 82;case 36:return 83;case 37:return 84;case 38:return 81;case 39:return 75;case 40:return 77;case 41:return 72;case 42:return e.yytext=e.yytext.replace(/\\([\\\]])/g,"$1"),72;case 43:return"INVALID";case 44:return 5}},rules:[/^(?:[^\x00]*?(?=(\{\{)))/,/^(?:[^\x00]+)/,/^(?:[^\x00]{2,}?(?=(\{\{|\\\{\{|\\\\\{\{|$)))/,/^(?:\{\{\{\{(?=[^\/]))/,/^(?:\{\{\{\{\/[^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=[=}\s\/.])\}\}\}\})/,/^(?:[^\x00]*?(?=(\{\{\{\{)))/,/^(?:[\s\S]*?--(~)?\}\})/,/^(?:\()/,/^(?:\))/,/^(?:\{\{\{\{)/,/^(?:\}\}\}\})/,/^(?:\{\{(~)?>)/,/^(?:\{\{(~)?#>)/,/^(?:\{\{(~)?#\*?)/,/^(?:\{\{(~)?\/)/,/^(?:\{\{(~)?\^\s*(~)?\}\})/,/^(?:\{\{(~)?\s*else\s*(~)?\}\})/,/^(?:\{\{(~)?\^)/,/^(?:\{\{(~)?\s*else\b)/,/^(?:\{\{(~)?\{)/,/^(?:\{\{(~)?&)/,/^(?:\{\{(~)?!--)/,/^(?:\{\{(~)?![\s\S]*?\}\})/,/^(?:\{\{(~)?\*?)/,/^(?:=)/,/^(?:\.\.)/,/^(?:\.(?=([=~}\s\/.)|])))/,/^(?:[\/.])/,/^(?:\s+)/,/^(?:\}(~)?\}\})/,/^(?:(~)?\}\})/,/^(?:"(\\["]|[^"])*")/,/^(?:'(\\[']|[^'])*')/,/^(?:@)/,/^(?:true(?=([~}\s)])))/,/^(?:false(?=([~}\s)])))/,/^(?:undefined(?=([~}\s)])))/,/^(?:null(?=([~}\s)])))/,/^(?:-?[0-9]+(?:\.[0-9]+)?(?=([~}\s)])))/,/^(?:as\s+\|)/,/^(?:\|)/,/^(?:([^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=([=~}\s\/.)|]))))/,/^(?:\[(\\\]|[^\]])*\])/,/^(?:.)/,/^(?:$)/],conditions:{mu:{rules:[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],inclusive:!1},emu:{rules:[2],inclusive:!1},com:{rules:[6],inclusive:!1},raw:{rules:[3,4,5],inclusive:!1},INITIAL:{rules:[0,1,44],inclusive:!0}}};function r(){this.yy={}}return t.lexer=e,r.prototype=t,t.Parser=r,new r}();e.default=r,t.exports=e.default},function(t,e,r){"use strict";var i=r(1).default;e.__esModule=!0;var n=i(r(39));function s(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];this.options=t}function a(t,e,r){void 0===e&&(e=t.length);var i=t[e-1],n=t[e-2];return i?"ContentStatement"===i.type?(n||!r?/\r?\n\s*?$/:/(^|\r?\n)\s*?$/).test(i.original):void 0:r}function o(t,e,r){void 0===e&&(e=-1);var i=t[e+1],n=t[e+2];return i?"ContentStatement"===i.type?(n||!r?/^\s*?\r?\n/:/^\s*?(\r?\n|$)/).test(i.original):void 0:r}function l(t,e,r){var i=t[null==e?0:e+1];if(i&&"ContentStatement"===i.type&&(r||!i.rightStripped)){var n=i.value;i.value=i.value.replace(r?/^\s+/:/^[ \t]*\r?\n?/,""),i.rightStripped=i.value!==n}}function c(t,e,r){var i=t[null==e?t.length-1:e-1];if(i&&"ContentStatement"===i.type&&(r||!i.leftStripped)){var n=i.value;return i.value=i.value.replace(r?/\s+$/:/[ \t]+$/,""),i.leftStripped=i.value!==n,i.leftStripped}}s.prototype=new n.default,s.prototype.Program=function(t){var e=!this.options.ignoreStandalone,r=!this.isRootSeen;this.isRootSeen=!0;for(var i=t.body,n=0,s=i.length;n<s;n++){var u=i[n],h=this.accept(u);if(h){var p=a(i,n,r),d=o(i,n,r),f=h.openStandalone&&p,m=h.closeStandalone&&d,g=h.inlineStandalone&&p&&d;h.close&&l(i,n,!0),h.open&&c(i,n,!0),e&&g&&(l(i,n),c(i,n)&&"PartialStatement"===u.type&&(u.indent=/([ \t]+$)/.exec(i[n-1].original)[1])),e&&f&&(l((u.program||u.inverse).body),c(i,n)),e&&m&&(l(i,n),c((u.inverse||u.program).body))}}return t},s.prototype.BlockStatement=s.prototype.DecoratorBlock=s.prototype.PartialBlockStatement=function(t){this.accept(t.program),this.accept(t.inverse);var e=t.program||t.inverse,r=t.program&&t.inverse,i=r,n=r;if(r&&r.chained)for(i=r.body[0].program;n.chained;)n=n.body[n.body.length-1].program;var s={open:t.openStrip.open,close:t.closeStrip.close,openStandalone:o(e.body),closeStandalone:a((i||e).body)};if(t.openStrip.close&&l(e.body,null,!0),r){var u=t.inverseStrip;u.open&&c(e.body,null,!0),u.close&&l(i.body,null,!0),t.closeStrip.open&&c(n.body,null,!0),!this.options.ignoreStandalone&&a(e.body)&&o(i.body)&&(c(e.body),l(i.body))}else t.closeStrip.open&&c(e.body,null,!0);return s},s.prototype.Decorator=s.prototype.MustacheStatement=function(t){return t.strip},s.prototype.PartialStatement=s.prototype.CommentStatement=function(t){var e=t.strip||{};return{inlineStandalone:!0,open:e.open,close:e.close}},e.default=s,t.exports=e.default},function(t,e,r){"use strict";var i=r(1).default;e.__esModule=!0;var n=i(r(6));function s(){this.parents=[]}function a(t){this.acceptRequired(t,"path"),this.acceptArray(t.params),this.acceptKey(t,"hash")}function o(t){a.call(this,t),this.acceptKey(t,"program"),this.acceptKey(t,"inverse")}function l(t){this.acceptRequired(t,"name"),this.acceptArray(t.params),this.acceptKey(t,"hash")}s.prototype={constructor:s,mutating:!1,acceptKey:function(t,e){var r=this.accept(t[e]);if(this.mutating){if(r&&!s.prototype[r.type])throw new n.default('Unexpected node type "'+r.type+'" found when accepting '+e+" on "+t.type);t[e]=r}},acceptRequired:function(t,e){if(this.acceptKey(t,e),!t[e])throw new n.default(t.type+" requires "+e)},acceptArray:function(t){for(var e=0,r=t.length;e<r;e++)this.acceptKey(t,e),t[e]||(t.splice(e,1),e--,r--)},accept:function(t){if(t){if(!this[t.type])throw new n.default("Unknown type: "+t.type,t);this.current&&this.parents.unshift(this.current),this.current=t;var e=this[t.type](t);return this.current=this.parents.shift(),!this.mutating||e?e:!1!==e?t:void 0}},Program:function(t){this.acceptArray(t.body)},MustacheStatement:a,Decorator:a,BlockStatement:o,DecoratorBlock:o,PartialStatement:l,PartialBlockStatement:function(t){l.call(this,t),this.acceptKey(t,"program")},ContentStatement:function(){},CommentStatement:function(){},SubExpression:a,PathExpression:function(){},StringLiteral:function(){},NumberLiteral:function(){},BooleanLiteral:function(){},UndefinedLiteral:function(){},NullLiteral:function(){},Hash:function(t){this.acceptArray(t.pairs)},HashPair:function(t){this.acceptRequired(t,"value")}},e.default=s,t.exports=e.default},function(t,e,r){"use strict";var i=r(1).default;e.__esModule=!0,e.SourceLocation=function(t,e){this.source=t,this.start={line:e.first_line,column:e.first_column},this.end={line:e.last_line,column:e.last_column}},e.id=function(t){return/^\[.*\]$/.test(t)?t.substr(1,t.length-2):t},e.stripFlags=function(t,e){return{open:"~"===t.charAt(2),close:"~"===e.charAt(e.length-3)}},e.stripComment=function(t){return t.replace(/^\{\{~?\!-?-?/,"").replace(/-?-?~?\}\}$/,"")},e.preparePath=function(t,e,r){r=this.locInfo(r);for(var i=t?"@":"",s=[],a=0,o=0,l=e.length;o<l;o++){var c=e[o].part,u=e[o].original!==c;if(i+=(e[o].separator||"")+c,u||".."!==c&&"."!==c&&"this"!==c)s.push(c);else{if(s.length>0)throw new n.default("Invalid path: "+i,{loc:r});".."===c&&(a++,"../")}}return{type:"PathExpression",data:t,depth:a,parts:s,original:i,loc:r}},e.prepareMustache=function(t,e,r,i,n,s){var a=i.charAt(3)||i.charAt(2),o="{"!==a&&"&"!==a;return{type:/\*/.test(i)?"Decorator":"MustacheStatement",path:t,params:e,hash:r,escaped:o,strip:n,loc:this.locInfo(s)}},e.prepareRawBlock=function(t,e,r,i){s(t,r),i=this.locInfo(i);var n={type:"Program",body:e,strip:{},loc:i};return{type:"BlockStatement",path:t.path,params:t.params,hash:t.hash,program:n,openStrip:{},inverseStrip:{},closeStrip:{},loc:i}},e.prepareBlock=function(t,e,r,i,a,o){i&&i.path&&s(t,i);var l=/\*/.test(t.open);e.blockParams=t.blockParams;var c=void 0,u=void 0;if(r){if(l)throw new n.default("Unexpected inverse block on decorator",r);r.chain&&(r.program.body[0].closeStrip=i.strip),u=r.strip,c=r.program}a&&(a=c,c=e,e=a);return{type:l?"DecoratorBlock":"BlockStatement",path:t.path,params:t.params,hash:t.hash,program:e,inverse:c,openStrip:t.strip,inverseStrip:u,closeStrip:i&&i.strip,loc:this.locInfo(o)}},e.prepareProgram=function(t,e){if(!e&&t.length){var r=t[0].loc,i=t[t.length-1].loc;r&&i&&(e={source:r.source,start:{line:r.start.line,column:r.start.column},end:{line:i.end.line,column:i.end.column}})}return{type:"Program",body:t,strip:{},loc:e}},e.preparePartialBlock=function(t,e,r,i){return s(t,r),{type:"PartialBlockStatement",name:t.path,params:t.params,hash:t.hash,program:e,openStrip:t.strip,closeStrip:r&&r.strip,loc:this.locInfo(i)}};var n=i(r(6));function s(t,e){if(e=e.path?e.path.original:e,t.path.original!==e){var r={loc:t.path.loc};throw new n.default(t.path.original+" doesn't match "+e,r)}}},function(t,e,r){"use strict";var i=r(1).default;e.__esModule=!0,e.Compiler=l,e.precompile=function(t,e,r){if(null==t||"string"!=typeof t&&"Program"!==t.type)throw new n.default("You must pass a string or Handlebars AST to Handlebars.precompile. You passed "+t);"data"in(e=e||{})||(e.data=!0);e.compat&&(e.useDepths=!0);var i=r.parse(t,e),s=(new r.Compiler).compile(i,e);return(new r.JavaScriptCompiler).compile(s,e)},e.compile=function(t,e,r){void 0===e&&(e={});if(null==t||"string"!=typeof t&&"Program"!==t.type)throw new n.default("You must pass a string or Handlebars AST to Handlebars.compile. You passed "+t);"data"in(e=s.extend({},e))||(e.data=!0);e.compat&&(e.useDepths=!0);var i=void 0;function a(){var i=r.parse(t,e),n=(new r.Compiler).compile(i,e),s=(new r.JavaScriptCompiler).compile(n,e,void 0,!0);return r.template(s)}function o(t,e){return i||(i=a()),i.call(this,t,e)}return o._setup=function(t){return i||(i=a()),i._setup(t)},o._child=function(t,e,r,n){return i||(i=a()),i._child(t,e,r,n)},o};var n=i(r(6)),s=r(5),a=i(r(35)),o=[].slice;function l(){}function c(t,e){if(t===e)return!0;if(s.isArray(t)&&s.isArray(e)&&t.length===e.length){for(var r=0;r<t.length;r++)if(!c(t[r],e[r]))return!1;return!0}}function u(t){if(!t.path.parts){var e=t.path;t.path={type:"PathExpression",data:!1,depth:0,parts:[e.original+""],original:e.original+"",loc:e.loc}}}l.prototype={compiler:l,equals:function(t){var e=this.opcodes.length;if(t.opcodes.length!==e)return!1;for(var r=0;r<e;r++){var i=this.opcodes[r],n=t.opcodes[r];if(i.opcode!==n.opcode||!c(i.args,n.args))return!1}e=this.children.length;for(r=0;r<e;r++)if(!this.children[r].equals(t.children[r]))return!1;return!0},guid:0,compile:function(t,e){this.sourceNode=[],this.opcodes=[],this.children=[],this.options=e,this.stringParams=e.stringParams,this.trackIds=e.trackIds,e.blockParams=e.blockParams||[];var r=e.knownHelpers;if(e.knownHelpers={helperMissing:!0,blockHelperMissing:!0,each:!0,if:!0,unless:!0,with:!0,log:!0,lookup:!0},r)for(var i in r)i in r&&(this.options.knownHelpers[i]=r[i]);return this.accept(t)},compileProgram:function(t){var e=(new this.compiler).compile(t,this.options),r=this.guid++;return this.usePartial=this.usePartial||e.usePartial,this.children[r]=e,this.useDepths=this.useDepths||e.useDepths,r},accept:function(t){if(!this[t.type])throw new n.default("Unknown type: "+t.type,t);this.sourceNode.unshift(t);var e=this[t.type](t);return this.sourceNode.shift(),e},Program:function(t){this.options.blockParams.unshift(t.blockParams);for(var e=t.body,r=e.length,i=0;i<r;i++)this.accept(e[i]);return this.options.blockParams.shift(),this.isSimple=1===r,this.blockParams=t.blockParams?t.blockParams.length:0,this},BlockStatement:function(t){u(t);var e=t.program,r=t.inverse;e=e&&this.compileProgram(e),r=r&&this.compileProgram(r);var i=this.classifySexpr(t);"helper"===i?this.helperSexpr(t,e,r):"simple"===i?(this.simpleSexpr(t),this.opcode("pushProgram",e),this.opcode("pushProgram",r),this.opcode("emptyHash"),this.opcode("blockValue",t.path.original)):(this.ambiguousSexpr(t,e,r),this.opcode("pushProgram",e),this.opcode("pushProgram",r),this.opcode("emptyHash"),this.opcode("ambiguousBlockValue")),this.opcode("append")},DecoratorBlock:function(t){var e=t.program&&this.compileProgram(t.program),r=this.setupFullMustacheParams(t,e,void 0),i=t.path;this.useDecorators=!0,this.opcode("registerDecorator",r.length,i.original)},PartialStatement:function(t){this.usePartial=!0;var e=t.program;e&&(e=this.compileProgram(t.program));var r=t.params;if(r.length>1)throw new n.default("Unsupported number of partial arguments: "+r.length,t);r.length||(this.options.explicitPartialContext?this.opcode("pushLiteral","undefined"):r.push({type:"PathExpression",parts:[],depth:0}));var i=t.name.original,s="SubExpression"===t.name.type;s&&this.accept(t.name),this.setupFullMustacheParams(t,e,void 0,!0);var a=t.indent||"";this.options.preventIndent&&a&&(this.opcode("appendContent",a),a=""),this.opcode("invokePartial",s,i,a),this.opcode("append")},PartialBlockStatement:function(t){this.PartialStatement(t)},MustacheStatement:function(t){this.SubExpression(t),t.escaped&&!this.options.noEscape?this.opcode("appendEscaped"):this.opcode("append")},Decorator:function(t){this.DecoratorBlock(t)},ContentStatement:function(t){t.value&&this.opcode("appendContent",t.value)},CommentStatement:function(){},SubExpression:function(t){u(t);var e=this.classifySexpr(t);"simple"===e?this.simpleSexpr(t):"helper"===e?this.helperSexpr(t):this.ambiguousSexpr(t)},ambiguousSexpr:function(t,e,r){var i=t.path,n=i.parts[0],s=null!=e||null!=r;this.opcode("getContext",i.depth),this.opcode("pushProgram",e),this.opcode("pushProgram",r),i.strict=!0,this.accept(i),this.opcode("invokeAmbiguous",n,s)},simpleSexpr:function(t){var e=t.path;e.strict=!0,this.accept(e),this.opcode("resolvePossibleLambda")},helperSexpr:function(t,e,r){var i=this.setupFullMustacheParams(t,e,r),s=t.path,o=s.parts[0];if(this.options.knownHelpers[o])this.opcode("invokeKnownHelper",i.length,o);else{if(this.options.knownHelpersOnly)throw new n.default("You specified knownHelpersOnly, but used the unknown helper "+o,t);s.strict=!0,s.falsy=!0,this.accept(s),this.opcode("invokeHelper",i.length,s.original,a.default.helpers.simpleId(s))}},PathExpression:function(t){this.addDepth(t.depth),this.opcode("getContext",t.depth);var e=t.parts[0],r=a.default.helpers.scopedId(t),i=!t.depth&&!r&&this.blockParamIndex(e);i?this.opcode("lookupBlockParam",i,t.parts):e?t.data?(this.options.data=!0,this.opcode("lookupData",t.depth,t.parts,t.strict)):this.opcode("lookupOnContext",t.parts,t.falsy,t.strict,r):this.opcode("pushContext")},StringLiteral:function(t){this.opcode("pushString",t.value)},NumberLiteral:function(t){this.opcode("pushLiteral",t.value)},BooleanLiteral:function(t){this.opcode("pushLiteral",t.value)},UndefinedLiteral:function(){this.opcode("pushLiteral","undefined")},NullLiteral:function(){this.opcode("pushLiteral","null")},Hash:function(t){var e=t.pairs,r=0,i=e.length;for(this.opcode("pushHash");r<i;r++)this.pushParam(e[r].value);for(;r--;)this.opcode("assignToHash",e[r].key);this.opcode("popHash")},opcode:function(t){this.opcodes.push({opcode:t,args:o.call(arguments,1),loc:this.sourceNode[0].loc})},addDepth:function(t){t&&(this.useDepths=!0)},classifySexpr:function(t){var e=a.default.helpers.simpleId(t.path),r=e&&!!this.blockParamIndex(t.path.parts[0]),i=!r&&a.default.helpers.helperExpression(t),n=!r&&(i||e);if(n&&!i){var s=t.path.parts[0],o=this.options;o.knownHelpers[s]?i=!0:o.knownHelpersOnly&&(n=!1)}return i?"helper":n?"ambiguous":"simple"},pushParams:function(t){for(var e=0,r=t.length;e<r;e++)this.pushParam(t[e])},pushParam:function(t){var e=null!=t.value?t.value:t.original||"";if(this.stringParams)e.replace&&(e=e.replace(/^(\.?\.\/)*/g,"").replace(/\//g,".")),t.depth&&this.addDepth(t.depth),this.opcode("getContext",t.depth||0),this.opcode("pushStringParam",e,t.type),"SubExpression"===t.type&&this.accept(t);else{if(this.trackIds){var r=void 0;if(!t.parts||a.default.helpers.scopedId(t)||t.depth||(r=this.blockParamIndex(t.parts[0])),r){var i=t.parts.slice(1).join(".");this.opcode("pushId","BlockParam",r,i)}else(e=t.original||e).replace&&(e=e.replace(/^this(?:\.|$)/,"").replace(/^\.\//,"").replace(/^\.$/,"")),this.opcode("pushId",t.type,e)}this.accept(t)}},setupFullMustacheParams:function(t,e,r,i){var n=t.params;return this.pushParams(n),this.opcode("pushProgram",e),this.opcode("pushProgram",r),t.hash?this.accept(t.hash):this.opcode("emptyHash",i),n},blockParamIndex:function(t){for(var e=0,r=this.options.blockParams.length;e<r;e++){var i=this.options.blockParams[e],n=i&&s.indexOf(i,t);if(i&&n>=0)return[e,n]}}}},function(t,e,r){"use strict";var i=r(1).default;e.__esModule=!0;var n=r(4),s=i(r(6)),a=r(5),o=i(r(43));function l(t){this.value=t}function c(){}c.prototype={nameLookup:function(t,e){return c.isValidJavaScriptVariableName(e)?[t,".",e]:[t,"[",JSON.stringify(e),"]"]},depthedLookup:function(t){return[this.aliasable("container.lookup"),'(depths, "',t,'")']},compilerInfo:function(){var t=n.COMPILER_REVISION;return[t,n.REVISION_CHANGES[t]]},appendToBuffer:function(t,e,r){return a.isArray(t)||(t=[t]),t=this.source.wrap(t,e),this.environment.isSimple?["return ",t,";"]:r?["buffer += ",t,";"]:(t.appendToBuffer=!0,t)},initializeBuffer:function(){return this.quotedString("")},compile:function(t,e,r,i){this.environment=t,this.options=e,this.stringParams=this.options.stringParams,this.trackIds=this.options.trackIds,this.precompile=!i,this.name=this.environment.name,this.isChild=!!r,this.context=r||{decorators:[],programs:[],environments:[]},this.preamble(),this.stackSlot=0,this.stackVars=[],this.aliases={},this.registers={list:[]},this.hashes=[],this.compileStack=[],this.inlineStack=[],this.blockParams=[],this.compileChildren(t,e),this.useDepths=this.useDepths||t.useDepths||t.useDecorators||this.options.compat,this.useBlockParams=this.useBlockParams||t.useBlockParams;var n=t.opcodes,a=void 0,o=void 0,l=void 0,c=void 0;for(l=0,c=n.length;l<c;l++)a=n[l],this.source.currentLocation=a.loc,o=o||a.loc,this[a.opcode].apply(this,a.args);if(this.source.currentLocation=o,this.pushSource(""),this.stackSlot||this.inlineStack.length||this.compileStack.length)throw new s.default("Compile completed with content left on stack");this.decorators.isEmpty()?this.decorators=void 0:(this.useDecorators=!0,this.decorators.prepend("var decorators = container.decorators;\n"),this.decorators.push("return fn;"),i?this.decorators=Function.apply(this,["fn","props","container","depth0","data","blockParams","depths",this.decorators.merge()]):(this.decorators.prepend("function(fn, props, container, depth0, data, blockParams, depths) {\n"),this.decorators.push("}\n"),this.decorators=this.decorators.merge()));var u=this.createFunctionContext(i);if(this.isChild)return u;var h={compiler:this.compilerInfo(),main:u};this.decorators&&(h.main_d=this.decorators,h.useDecorators=!0);var p=this.context,d=p.programs,f=p.decorators;for(l=0,c=d.length;l<c;l++)d[l]&&(h[l]=d[l],f[l]&&(h[l+"_d"]=f[l],h.useDecorators=!0));return this.environment.usePartial&&(h.usePartial=!0),this.options.data&&(h.useData=!0),this.useDepths&&(h.useDepths=!0),this.useBlockParams&&(h.useBlockParams=!0),this.options.compat&&(h.compat=!0),i?h.compilerOptions=this.options:(h.compiler=JSON.stringify(h.compiler),this.source.currentLocation={start:{line:1,column:0}},h=this.objectLiteral(h),e.srcName?(h=h.toStringWithSourceMap({file:e.destName})).map=h.map&&h.map.toString():h=h.toString()),h},preamble:function(){this.lastContext=0,this.source=new o.default(this.options.srcName),this.decorators=new o.default(this.options.srcName)},createFunctionContext:function(t){var e="",r=this.stackVars.concat(this.registers.list);r.length>0&&(e+=", "+r.join(", "));var i=0;for(var n in this.aliases){var s=this.aliases[n];this.aliases.hasOwnProperty(n)&&s.children&&s.referenceCount>1&&(e+=", alias"+ ++i+"="+n,s.children[0]="alias"+i)}var a=["container","depth0","helpers","partials","data"];(this.useBlockParams||this.useDepths)&&a.push("blockParams"),this.useDepths&&a.push("depths");var o=this.mergeSource(e);return t?(a.push(o),Function.apply(this,a)):this.source.wrap(["function(",a.join(","),") {\n  ",o,"}"])},mergeSource:function(t){var e=this.environment.isSimple,r=!this.forceBuffer,i=void 0,n=void 0,s=void 0,a=void 0;return this.source.each(function(t){t.appendToBuffer?(s?t.prepend("  + "):s=t,a=t):(s&&(n?s.prepend("buffer += "):i=!0,a.add(";"),s=a=void 0),n=!0,e||(r=!1))}),r?s?(s.prepend("return "),a.add(";")):n||this.source.push('return "";'):(t+=", buffer = "+(i?"":this.initializeBuffer()),s?(s.prepend("return buffer + "),a.add(";")):this.source.push("return buffer;")),t&&this.source.prepend("var "+t.substring(2)+(i?"":";\n")),this.source.merge()},blockValue:function(t){var e=this.aliasable("helpers.blockHelperMissing"),r=[this.contextName(0)];this.setupHelperArgs(t,0,r);var i=this.popStack();r.splice(1,0,i),this.push(this.source.functionCall(e,"call",r))},ambiguousBlockValue:function(){var t=this.aliasable("helpers.blockHelperMissing"),e=[this.contextName(0)];this.setupHelperArgs("",0,e,!0),this.flushInline();var r=this.topStack();e.splice(1,0,r),this.pushSource(["if (!",this.lastHelper,") { ",r," = ",this.source.functionCall(t,"call",e),"}"])},appendContent:function(t){this.pendingContent?t=this.pendingContent+t:this.pendingLocation=this.source.currentLocation,this.pendingContent=t},append:function(){if(this.isInline())this.replaceStack(function(t){return[" != null ? ",t,' : ""']}),this.pushSource(this.appendToBuffer(this.popStack()));else{var t=this.popStack();this.pushSource(["if (",t," != null) { ",this.appendToBuffer(t,void 0,!0)," }"]),this.environment.isSimple&&this.pushSource(["else { ",this.appendToBuffer("''",void 0,!0)," }"])}},appendEscaped:function(){this.pushSource(this.appendToBuffer([this.aliasable("container.escapeExpression"),"(",this.popStack(),")"]))},getContext:function(t){this.lastContext=t},pushContext:function(){this.pushStackLiteral(this.contextName(this.lastContext))},lookupOnContext:function(t,e,r,i){var n=0;i||!this.options.compat||this.lastContext?this.pushContext():this.push(this.depthedLookup(t[n++])),this.resolvePath("context",t,n,e,r)},lookupBlockParam:function(t,e){this.useBlockParams=!0,this.push(["blockParams[",t[0],"][",t[1],"]"]),this.resolvePath("context",e,1)},lookupData:function(t,e,r){t?this.pushStackLiteral("container.data(data, "+t+")"):this.pushStackLiteral("data"),this.resolvePath("data",e,0,!0,r)},resolvePath:function(t,e,r,i,n){var s=this;if(this.options.strict||this.options.assumeObjects)this.push(function(t,e,r,i){var n=e.popStack(),s=0,a=r.length;t&&a--;for(;s<a;s++)n=e.nameLookup(n,r[s],i);return t?[e.aliasable("container.strict"),"(",n,", ",e.quotedString(r[s]),")"]:n}(this.options.strict&&n,this,e,t));else for(var a=e.length;r<a;r++)this.replaceStack(function(n){var a=s.nameLookup(n,e[r],t);return i?[" && ",a]:[" != null ? ",a," : ",n]})},resolvePossibleLambda:function(){this.push([this.aliasable("container.lambda"),"(",this.popStack(),", ",this.contextName(0),")"])},pushStringParam:function(t,e){this.pushContext(),this.pushString(e),"SubExpression"!==e&&("string"==typeof t?this.pushString(t):this.pushStackLiteral(t))},emptyHash:function(t){this.trackIds&&this.push("{}"),this.stringParams&&(this.push("{}"),this.push("{}")),this.pushStackLiteral(t?"undefined":"{}")},pushHash:function(){this.hash&&this.hashes.push(this.hash),this.hash={values:[],types:[],contexts:[],ids:[]}},popHash:function(){var t=this.hash;this.hash=this.hashes.pop(),this.trackIds&&this.push(this.objectLiteral(t.ids)),this.stringParams&&(this.push(this.objectLiteral(t.contexts)),this.push(this.objectLiteral(t.types))),this.push(this.objectLiteral(t.values))},pushString:function(t){this.pushStackLiteral(this.quotedString(t))},pushLiteral:function(t){this.pushStackLiteral(t)},pushProgram:function(t){null!=t?this.pushStackLiteral(this.programExpression(t)):this.pushStackLiteral(null)},registerDecorator:function(t,e){var r=this.nameLookup("decorators",e,"decorator"),i=this.setupHelperArgs(e,t);this.decorators.push(["fn = ",this.decorators.functionCall(r,"",["fn","props","container",i])," || fn;"])},invokeHelper:function(t,e,r){var i=this.popStack(),n=this.setupHelper(t,e),s=r?[n.name," || "]:"",a=["("].concat(s,i);this.options.strict||a.push(" || ",this.aliasable("helpers.helperMissing")),a.push(")"),this.push(this.source.functionCall(a,"call",n.callParams))},invokeKnownHelper:function(t,e){var r=this.setupHelper(t,e);this.push(this.source.functionCall(r.name,"call",r.callParams))},invokeAmbiguous:function(t,e){this.useRegister("helper");var r=this.popStack();this.emptyHash();var i=this.setupHelper(0,t,e),n=["(","(helper = ",this.lastHelper=this.nameLookup("helpers",t,"helper")," || ",r,")"];this.options.strict||(n[0]="(helper = ",n.push(" != null ? helper : ",this.aliasable("helpers.helperMissing"))),this.push(["(",n,i.paramsInit?["),(",i.paramsInit]:[],"),","(typeof helper === ",this.aliasable('"function"')," ? ",this.source.functionCall("helper","call",i.callParams)," : helper))"])},invokePartial:function(t,e,r){var i=[],n=this.setupParams(e,1,i);t&&(e=this.popStack(),delete n.name),r&&(n.indent=JSON.stringify(r)),n.helpers="helpers",n.partials="partials",n.decorators="container.decorators",t?i.unshift(e):i.unshift(this.nameLookup("partials",e,"partial")),this.options.compat&&(n.depths="depths"),n=this.objectLiteral(n),i.push(n),this.push(this.source.functionCall("container.invokePartial","",i))},assignToHash:function(t){var e=this.popStack(),r=void 0,i=void 0,n=void 0;this.trackIds&&(n=this.popStack()),this.stringParams&&(i=this.popStack(),r=this.popStack());var s=this.hash;r&&(s.contexts[t]=r),i&&(s.types[t]=i),n&&(s.ids[t]=n),s.values[t]=e},pushId:function(t,e,r){"BlockParam"===t?this.pushStackLiteral("blockParams["+e[0]+"].path["+e[1]+"]"+(r?" + "+JSON.stringify("."+r):"")):"PathExpression"===t?this.pushString(e):"SubExpression"===t?this.pushStackLiteral("true"):this.pushStackLiteral("null")},compiler:c,compileChildren:function(t,e){for(var r=t.children,i=void 0,n=void 0,s=0,a=r.length;s<a;s++){i=r[s],n=new this.compiler;var o=this.matchExistingProgram(i);if(null==o){this.context.programs.push("");var l=this.context.programs.length;i.index=l,i.name="program"+l,this.context.programs[l]=n.compile(i,e,this.context,!this.precompile),this.context.decorators[l]=n.decorators,this.context.environments[l]=i,this.useDepths=this.useDepths||n.useDepths,this.useBlockParams=this.useBlockParams||n.useBlockParams,i.useDepths=this.useDepths,i.useBlockParams=this.useBlockParams}else i.index=o.index,i.name="program"+o.index,this.useDepths=this.useDepths||o.useDepths,this.useBlockParams=this.useBlockParams||o.useBlockParams}},matchExistingProgram:function(t){for(var e=0,r=this.context.environments.length;e<r;e++){var i=this.context.environments[e];if(i&&i.equals(t))return i}},programExpression:function(t){var e=this.environment.children[t],r=[e.index,"data",e.blockParams];return(this.useBlockParams||this.useDepths)&&r.push("blockParams"),this.useDepths&&r.push("depths"),"container.program("+r.join(", ")+")"},useRegister:function(t){this.registers[t]||(this.registers[t]=!0,this.registers.list.push(t))},push:function(t){return t instanceof l||(t=this.source.wrap(t)),this.inlineStack.push(t),t},pushStackLiteral:function(t){this.push(new l(t))},pushSource:function(t){this.pendingContent&&(this.source.push(this.appendToBuffer(this.source.quotedString(this.pendingContent),this.pendingLocation)),this.pendingContent=void 0),t&&this.source.push(t)},replaceStack:function(t){var e=["("],r=void 0,i=void 0,n=void 0;if(!this.isInline())throw new s.default("replaceStack on non-inline");var a=this.popStack(!0);if(a instanceof l)e=["(",r=[a.value]],n=!0;else{i=!0;var o=this.incrStack();e=["((",this.push(o)," = ",a,")"],r=this.topStack()}var c=t.call(this,r);n||this.popStack(),i&&this.stackSlot--,this.push(e.concat(c,")"))},incrStack:function(){return this.stackSlot++,this.stackSlot>this.stackVars.length&&this.stackVars.push("stack"+this.stackSlot),this.topStackName()},topStackName:function(){return"stack"+this.stackSlot},flushInline:function(){var t=this.inlineStack;this.inlineStack=[];for(var e=0,r=t.length;e<r;e++){var i=t[e];if(i instanceof l)this.compileStack.push(i);else{var n=this.incrStack();this.pushSource([n," = ",i,";"]),this.compileStack.push(n)}}},isInline:function(){return this.inlineStack.length},popStack:function(t){var e=this.isInline(),r=(e?this.inlineStack:this.compileStack).pop();if(!t&&r instanceof l)return r.value;if(!e){if(!this.stackSlot)throw new s.default("Invalid stack pop");this.stackSlot--}return r},topStack:function(){var t=this.isInline()?this.inlineStack:this.compileStack,e=t[t.length-1];return e instanceof l?e.value:e},contextName:function(t){return this.useDepths&&t?"depths["+t+"]":"depth"+t},quotedString:function(t){return this.source.quotedString(t)},objectLiteral:function(t){return this.source.objectLiteral(t)},aliasable:function(t){var e=this.aliases[t];return e?(e.referenceCount++,e):((e=this.aliases[t]=this.source.wrap(t)).aliasable=!0,e.referenceCount=1,e)},setupHelper:function(t,e,r){var i=[];return{params:i,paramsInit:this.setupHelperArgs(e,t,i,r),name:this.nameLookup("helpers",e,"helper"),callParams:[this.aliasable(this.contextName(0)+" != null ? "+this.contextName(0)+" : (container.nullContext || {})")].concat(i)}},setupParams:function(t,e,r){var i={},n=[],s=[],a=[],o=!r,l=void 0;o&&(r=[]),i.name=this.quotedString(t),i.hash=this.popStack(),this.trackIds&&(i.hashIds=this.popStack()),this.stringParams&&(i.hashTypes=this.popStack(),i.hashContexts=this.popStack());var c=this.popStack(),u=this.popStack();(u||c)&&(i.fn=u||"container.noop",i.inverse=c||"container.noop");for(var h=e;h--;)l=this.popStack(),r[h]=l,this.trackIds&&(a[h]=this.popStack()),this.stringParams&&(s[h]=this.popStack(),n[h]=this.popStack());return o&&(i.args=this.source.generateArray(r)),this.trackIds&&(i.ids=this.source.generateArray(a)),this.stringParams&&(i.types=this.source.generateArray(s),i.contexts=this.source.generateArray(n)),this.options.data&&(i.data="data"),this.useBlockParams&&(i.blockParams="blockParams"),i},setupHelperArgs:function(t,e,r,i){var n=this.setupParams(t,e,r);return n=this.objectLiteral(n),i?(this.useRegister("options"),r.push("options"),["options=",n]):r?(r.push(n),""):n}},function(){for(var t="break else new var case finally return void catch for switch while continue function this with default if throw delete in try do instanceof typeof abstract enum int short boolean export interface static byte extends long super char final native synchronized class float package throws const goto private transient debugger implements protected volatile double import public let yield await null true false".split(" "),e=c.RESERVED_WORDS={},r=0,i=t.length;r<i;r++)e[t[r]]=!0}(),c.isValidJavaScriptVariableName=function(t){return!c.RESERVED_WORDS[t]&&/^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(t)},e.default=c,t.exports=e.default},function(t,e,r){"use strict";e.__esModule=!0;var i=r(5),n=void 0;try{}catch(t){}function s(t,e,r){if(i.isArray(t)){for(var n=[],s=0,a=t.length;s<a;s++)n.push(e.wrap(t[s],r));return n}return"boolean"==typeof t||"number"==typeof t?t+"":t}function a(t){this.srcFile=t,this.source=[]}n||((n=function(t,e,r,i){this.src="",i&&this.add(i)}).prototype={add:function(t){i.isArray(t)&&(t=t.join("")),this.src+=t},prepend:function(t){i.isArray(t)&&(t=t.join("")),this.src=t+this.src},toStringWithSourceMap:function(){return{code:this.toString()}},toString:function(){return this.src}}),a.prototype={isEmpty:function(){return!this.source.length},prepend:function(t,e){this.source.unshift(this.wrap(t,e))},push:function(t,e){this.source.push(this.wrap(t,e))},merge:function(){var t=this.empty();return this.each(function(e){t.add(["  ",e,"\n"])}),t},each:function(t){for(var e=0,r=this.source.length;e<r;e++)t(this.source[e])},empty:function(){var t=this.currentLocation||{start:{}};return new n(t.start.line,t.start.column,this.srcFile)},wrap:function(t){var e=arguments.length<=1||void 0===arguments[1]?this.currentLocation||{start:{}}:arguments[1];return t instanceof n?t:(t=s(t,this,e),new n(e.start.line,e.start.column,this.srcFile,t))},functionCall:function(t,e,r){return r=this.generateList(r),this.wrap([t,e?"."+e+"(":"(",r,")"])},quotedString:function(t){return'"'+(t+"").replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")+'"'},objectLiteral:function(t){var e=[];for(var r in t)if(t.hasOwnProperty(r)){var i=s(t[r],this);"undefined"!==i&&e.push([this.quotedString(r),":",i])}var n=this.generateList(e);return n.prepend("{"),n.add("}"),n},generateList:function(t){for(var e=this.empty(),r=0,i=t.length;r<i;r++)r&&e.add(","),e.add(s(t[r],this));return e},generateArray:function(t){var e=this.generateList(t);return e.prepend("["),e.add("]"),e}},e.default=a,t.exports=e.default}])}),function(t){var e=[];t.libraries={register:function(t){e.push(t)},run:function(){for(var t=0;t<e.length;t++)e[t]()}}}(window),function(t){var r={el:null,init:function(){for(var t=document.querySelectorAll("body .accordion"),r=0;r<t.length;r++)t[r].addEventListener("click",function(t){var r=t.target||e.srcElement;r.className.indexOf("menu-label")>-1&&i(r)});var i=function(t){var e=t.nextElementSibling;return-1===t.className.indexOf("active")?(t.classList.add("active"),e.style.height=1.3*n(e)+"px"):(t.classList.remove("active"),e.style.height=0),t},n=function(t){height=0;for(var e=t.querySelectorAll("*"),r=0;r<e.length;r++)height+=e[r].clientHeight;return height}}};window.$AC=r,libraries.register(r.init)}(),$AC.init(),function(t){var e=new XMLHttpRequest;t.$ajax={jsonRequest:function(t,r){var i,n;i=t,n=r,e.onreadystatechange=function(){if(4==this.readyState&&200==this.status){var t=JSON.parse(this.responseText);n&&n(t,this)}},e.open("GET",i,!0),e.send()},request:function(t,r){var i,n;i=t,n=r,e.onreadystatechange=function(){if(4==this.readyState&&200==this.status){var t=this.responseText;n&&n(t,this)}},e.open("GET",i,!0),e.send()}}}(window),function(window){function init(){var calc={result:null,elements:{display:document.getElementById("display")},_setDisplay:function(t){display.value=t},clear:function(){this._setDisplay("")},del:function(){var t=this.elements.display.value.slice(0,-1);"."!==t[t.length-1]&&","!==t[t.length-1]||(t=t.slice(0,-1)),this._setDisplay(t)},equals:function(){this.result=this.elements.display.value;var evalCode=this.result/100+";";this._setDisplay(eval(evalCode))}};window.calc=calc}window.libraries.register(init)}(window),function(t){function e(t){var e=t;this.items=e.querySelectorAll(".carousel__items > .carousel__item"),this.navItems=null,this.arrows=null,this.init=function(){this._generateNavigation(),this._generateArrows()},this.goTo=function(t){var r=e.querySelector(".carousel__nav > .carousel__nav-item--active"),i=e.querySelector(".carousel__item--active");r.classList.remove("carousel__nav-item--active"),i.classList.remove("carousel__item--active"),this.navItems[t].classList.add("carousel__nav-item--active"),this.items[t].classList.add("carousel__item--active")},this.arrowNav=function(t){var r=e.querySelector(".carousel__nav > .carousel__nav-item--active"),i=Number.parseInt(r.dataset.index)+t;void 0===this.navItems[i]&&(i=t>0?0:this.navItems.length-1),this.goTo(i)},this._generateNavigation=function(){var t=this,r=this.items,i="",n="carousel__nav-item--active",s=document.createElement("div");i+='<ul class="carousel__nav">';for(var a=0;a<r.length;a++)i+='<li class="carousel__nav-item '+n+'" data-index='+a+"> </li>",n="";i+="</ul>",s.innerHTML=i,e.appendChild(s),this.navItems=e.querySelectorAll(".carousel__nav > li");for(a=0;a<this.navItems.length;a++)this.navItems[a].addEventListener("click",function(){t.arrowNav(1),t.goTo(this.dataset.index)})},this._generateArrows=function(){var t=this,r=document.createElement("div");r.innerHTML='<span class="carousel__arrow carousel__arrow--left fa fa-chevron-left"></span><span class="carousel__arrow carousel__arrow--right fa fa-chevron-right"></span>',e.appendChild(r),e.querySelector(".carousel__arrow--left").addEventListener("click",function(){t.arrowNav(-1)}),e.querySelector(".carousel__arrow--right").addEventListener("click",function(){t.arrowNav(1)})}}window.carousel=function(t){for(var r=document.querySelectorAll(".carousel"),i=0;i<r.length;i++){var n=new e(r[i]);n.init()}return n},libraries.register(carousel)}(),window.libraries.register(Gallery),window.addEventListener("resize",function(){windowWidthCount()}),function(t){function e(t,e){return function(){e.remove(),t.removeAttribute("data-src")}}libraries.register(function(){$images=document.querySelectorAll("img[data-src]");for(var t=0;t<$images.length;t++){var r=(i=void 0,(i=document.createElement("div")).classList.add("img-loader"),i.innerHTML='<div class="img-loader__icon"><span class="fa fa-refresh fa-spin"></span></div>',i);$images[t].parentElement.insertBefore(r,$images[t]),$images[t].setAttribute("src",$images[t].getAttribute("data-src")),$images[t].onload=e($images[t],r)}var i})}(window),function(t){var e="modal__overlay--active";function r(t){t.style.opacity=1,function r(){(t.style.opacity-=.1)<0?(t.style.display="none",t.classList.remove(e)):requestAnimationFrame(r)}()}t.modal=function(t){var i=null;console.log('[data-modal-id="'+t+'"]');var n,s=document.querySelector('[data-modal-id="'+t+'"]');return document.querySelector('.modal__overlay > [data-modal-id="'+t+'"]')&&(i=document.querySelector('.modal__overlay > [data-modal-id="'+t+'"]').parentElement),null===i&&(n=document.querySelector("body"),(i=document.createElement("section")).style.display="none",i.classList.add("modal__overlay"),i.classList.add("modal__overlay--active"),s.style.display="block",i.appendChild(s),n.appendChild(i),function(){for(var t=i.querySelectorAll("[data-close]"),e=0;e<t.length;e++)t[e].addEventListener("click",function(){r(i)})}()),{fadeIn:function(){var t;console.log(i),(t=i).style.opacity=0,t.style.display="block",function r(){var i=parseFloat(t.style.opacity);(i+=.1)>1||(t.style.opacity=i,t.classList.add(e),requestAnimationFrame(r))}()},fadeOut:function(){console.log(i),r(i)}}},libraries.register(function(){for(var e=document.querySelectorAll("[data-modal-open]"),r=0;r<e.length;r++)e[r].addEventListener("click",function(){var e=this.dataset.modalOpen;console.log(e),t.modal(e).fadeIn()});windowWidthCount()})}(window),window.requestAnimFrame=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||function(t){window.setTimeout(t,1e3/60)},function(t){libraries.register(function(){var e=this,r=document.querySelector(".content-holder"),i=document.querySelector(".navbar").getBoundingClientRect().height+10;e.getPosY=function(t){return(t=t.getBoundingClientRect()).top+r.scrollTop-i},e.scrollToElement=function(i,n,s){if(n||(n=1e3),i.nodeName||(i=document.querySelector(i)),!i)throw"Element inexistent!";var a,o=r.scrollTop,l=e.getPosY(i)-o;t.requestAnimFrame(function e(i){a||(a=i);var c,u=i-a,h=Math.min(u/n,1);h=(c=h)<.5?4*c*c*c:(c-1)*(2*c-2)*(2*c-2)+1,r.scrollTo(0,o+l*h),u<n?t.requestAnimFrame(e):s&&s()})},t.scrollToElement=e.scrollToElement})}(window),function(t){function e(t){var e=document.querySelectorAll(".tab__title--selected"),r=document.querySelector(".tab__content--selected"),i=document.querySelector("[data-content-id='"+t+"']");console.log("[data-content-id='"+t+"']",i);for(var n=document.querySelectorAll("[data-tab-id='"+t+"']"),s=0;s<e.length;s++)e[s].classList.remove("tab__title--selected");for(s=0;s<n.length;s++)n[s].classList.add("tab__title--selected");r.classList.remove("tab__content--selected"),i.classList.add("tab__content--selected")}libraries.register(function(){for(var r=document.querySelectorAll(".tab__title"),i=0;i<r.length;i++)r[i].addEventListener("click",function(){console.log(this.dataset.tabId),e(this.dataset.tabId)});var n=document.querySelectorAll(".tab__container > .tab__title");for(i=0;i<n.length;i++)n[i].addEventListener("click",function(){t.scrollToElement(this,1e3)})})}(window),function(t){var e=[];t.templates={register:function(t){e.push(t)},run:function(){for(var t=0;t<e.length;t++)e[t]()}}}(window),function(t){$ajax.request("dist/templates/template.html",function(e){document.querySelector("head").innerHTML+=e,$ajax.jsonRequest("datasource/portfolio.json",function(e){t.dataSource=e,t.templates.run(),t.libraries.run()})})}(window),function(t,e){t.templates.register(function(){e.registerPartial("ecard",document.getElementById("card-template").innerHTML),e.registerPartial("accordion",document.getElementById("accordion-template").innerHTML),e.registerPartial("gallery",document.getElementById("gallery-template").innerHTML),e.registerPartial("modal-button",document.getElementById("modal-button-template").innerHTML),e.registerPartial("calculator",document.getElementById("calculator-template").innerHTML),e.registerPartial("modalsearch",document.getElementById("modal-search-template").innerHTML),e.registerPartial("modallive",document.getElementById("modal-live-template").innerHTML),e.registerPartial("menu-desktop",document.getElementById("menu-desktop-template").innerHTML),e.registerPartial("menu-mobile",document.getElementById("menu-mobile-template").innerHTML),e.registerPartial("section-header",document.getElementById("section-header-template").innerHTML),e.registerPartial("tab-list",document.getElementById("tabs-tab-list-template").innerHTML),e.registerPartial("tab-content",document.getElementById("tabs-tab-content-template").innerHTML),e.registerPartial("carousel",document.getElementById("carousel-template").innerHTML),e.registerPartial("projects",document.getElementById("tabs-template").innerHTML),e.registerPartial("graph",document.getElementById("graph-template").innerHTML),e.registerPartial("bar",document.getElementById("bar-template").innerHTML),e.registerPartial("skills",document.getElementById("skills-template").innerHTML);var t=document.getElementById("home-holder",document.getElementById("home-template").innerHTML),r=document.getElementById("home-template").innerHTML,i=e.compile(r),n={portfolio:dataSource};t.innerHTML=i(n)})}(window,Handlebars);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
